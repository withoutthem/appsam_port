
1. 리팩터링이란 ?
코드 리팩터링이란 소프트웨어의 외부 동작을 변경하지 않으면서 내부 구조를 개선하는 과정입니다.
이는 코드의 가독성을 높이고, 유지보수를 용이하게 하며, 버그를 줄이는 데 도움이 됩니다.
리팩터링은 효율적인 소프트웨어 개발의 핵심 요소이며, 지속적인 코드 품질 향상을 위해 필수적인 작업입니다.

2. 리팩터링의 중요성
- 가독성 향상: 깔끔하고 이해하기 쉬운 코드는 다른 개발자들이 코드를 더 빠르게 이해하고 수정할 수 있게 해줍니다.
- 버그 감소: 복잡한 코드는 버그의 원인이 될 수 있습니다. 코드를 간결하게 만들면 버그를 줄일 수 있습니다.
- 유지보수 용이: 잘 정리된 코드는 유지보수가 훨씬 쉬워집니다.
- 성능 최적화: 때때로 리팩터링은 성능을 향상시킬 수 있습니다.

3. 리팩터링의 기본 원칙
- 기능의 변경 없음: 리팩터링은 외부적으로 보이는 기능을 변경하지 않고 내부 구조만 개선합니다.
- 작은 단계로 진행: 대규모 변경보다는 작은 단계로 리팩터링을 진행하여 오류의 위험을 줄입니다.
- 테스트의 중요성: 리팩터링 전후에 테스트를 수행하여 기능이 그대로 유지되는지 확인합니다.

4. 요약
- 리팩터링을 해놓아야 나중에 유지보수가 쉽다.
- 코드는 가만히 두면 점점 썩어간다.
- 남에게 코드를 보여주려면 리팩터링해서 깔끔하게 만들어야 한다.